{"version":3,"sources":["client.js","components/card/imageCard.component.jsx","components/card/videoCard.component.jsx","components/card/textCard.component.jsx","components/card/quoteCard.component.jsx","components/card/bookCard.component.jsx","components/card/projectCard.component.jsx","components/card/card.component.jsx","components/tags/tags.component.jsx","pages/scroller.page.jsx","App.js","reportWebVitals.js","index.js"],"names":["sanityClient","projectId","dataset","useCdn","ImageCard","position","source","content","dispatchAddToHistory","builder","imageUrlBuilder","className","title","class","src","images","image","caption","blocks","clientConfig","VideoCard","serializers","marks","internalLink","mark","children","onClick","id","reference","_ref","type","payload","link","blank","href","target","rel","console","log","referenceType","videos","muxAssetDoc","assetDocument","autoload","autoplay","showControls","muted","loop","text","TextCard","data-internallink","QuoteCard","BookCard","ProjectCard","Card","cardComponent","_type","Tags","currentTags","setClickedTag","length","map","tag","browseHistory","historyReducer","action","addToBrowseHistory","push","OnePost","useReducer","historyState","dispatch","useState","postData","setPostData","setCurrentTags","clickedTag","historyOffset","slug","useParams","historyItem","returnLatestPosition","returnHistoryState","pos","returnedPos","historyStateHasContent","i","extractMatchedTags","tagsArray","count","_id","filter","undefined","returnTagSelection","latestPos","leftTags","left","tags","middleTags","rightTags","middle","right","uniqueTags","reduce","acc","current","find","item","concat","arr","n","result","Array","len","taken","RangeError","x","Math","floor","random","getRandom","useEffect","filterPosts","data","fetchRequest","fetch","then","catch","error","App","component","scroller","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38a13c0c.chunk.js","sourcesContent":["import sanityClient from \"@sanity/client\";\n\nexport default sanityClient({\n  projectId: \"yjflfwft\", // find this at manage.sanity.io or in your sanity.json\n  dataset: \"production\", // this is from those question during 'sanity init'\n  useCdn: true,\n});","import React, { useEffect, useState } from \"react\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\n\nimport './card.style.css';\n\n//TODO: multiple images might be slideshow in the future?\nconst ImageCard = ({position, content, dispatchAddToHistory,sanityClient}) =>{\n\n    const builder = imageUrlBuilder(sanityClient);\n    function urlFor(source) {\n    return builder.image(source);\n    }\n\n    return(\n    <div className={`cardContent`}>\n        <div className={`title`}>{content.title}</div>\n        <div class=\"cardImageWrapper\">\n            <img src={urlFor(content.images[0].image)} />\n        </div>\n        {content.images[0].caption ?\n            <div className=\"blockContent\">\n                    <BlockContent\n                        blocks={content.images[0].caption}\n                        projectId={sanityClient.clientConfig.projectId}\n                        dataset={sanityClient.clientConfig.dataset}\n                    />\n            </div>\n        : ''}\n    </div>)\n}\n\nexport default ImageCard;","import React, { useEffect, useState } from \"react\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport SanityMuxPlayer from 'sanity-mux-player'\n\nimport './card.style.css';\n\n\n\n//TODO: multiple images might be slideshow in the future?\nconst VideoCard = ({position, content, dispatchAddToHistory,sanityClient}) =>{\n\n    const handleClickedInternalLink = (id) =>{\n       dispatchAddToHistory({ type: 'add', payload: {position:position,id:id}})\n    }\n\n    const serializers = {\n        marks: {\n            internalLink: ({mark, children}) => {\n            return <span className=\"internalLink\" onClick={() => { handleClickedInternalLink(mark.reference._ref)}}>{children}</span>\n            },\n            link: ({mark, children}) => {\n            // Read https://css-tricks.com/use-target_blank/\n            const { blank, href } = mark\n            return blank ?\n                <a href={href} target=\"_blank\" rel=\"noopener\">{children}</a>\n                : <a href={href}>{children}</a>\n            }\n        }\n    }\n\n    const builder = imageUrlBuilder(sanityClient);\n        function urlFor(source) {\n        return builder.image(source);\n    }\n\n    console.log(content);\n\n    return(\n    <div className={`cardContent ${content.referenceType}`}>\n        <div className={`title`}>{content.title}</div>\n        {content.videos[0].muxAssetDoc ?\n            <div className=\"videoWrapper\">\n                <SanityMuxPlayer\n                    assetDocument={content.videos[0].muxAssetDoc[0]}\n                    autoload={true}\n                    autoplay={false}\n                    showControls={true}\n                    muted={false}\n                    loop={false}\n                />\n            </div>\n        :''}\n        {content.images ?\n                <div class=\"cardImageWrapper\">\n                <img src={urlFor(content.images[0].image)} />\n            </div>\n        :''}\n        <div className=\"blockContent\">\n                <BlockContent\n                    blocks={content.text}\n                    projectId={sanityClient.clientConfig.projectId}\n                    dataset={sanityClient.clientConfig.dataset}\n                    serializers={serializers} \n                />\n        </div>\n    </div>)\n}\n\nexport default VideoCard;","import React, { useEffect, useState } from \"react\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\n\nimport './card.style.css';\n\n//TODO: multiple images might be slideshow in the future?\nconst TextCard = ({position, content, dispatchAddToHistory,sanityClient}) =>{\n\n    const serializers = {\n        marks: {\n            internalLink: ({mark, children}) => {\n            return <span className=\"internalLink\" data-internallink={mark.reference._ref}>{children}</span>\n            },\n            link: ({mark, children}) => {\n            // Read https://css-tricks.com/use-target_blank/\n            const { blank, href } = mark\n            return blank ?\n                <a href={href} target=\"_blank\" rel=\"noopener\">{children}</a>\n                : <a href={href}>{children}</a>\n            }\n        }\n    }\n\n    const builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\n    return(\n    <div className={`cardContent`}>\n        <div className={`title`}>{content.title}</div>\n        {content.images ?\n                <div class=\"cardImageWrapper\">\n                <img src={urlFor(content.images[0].image)} />\n            </div>\n        :''}\n        <div className=\"blockContent\">\n                <BlockContent\n                    blocks={content.text}\n                    projectId={sanityClient.clientConfig.projectId}\n                    dataset={sanityClient.clientConfig.dataset}\n                    serializers={serializers} \n                />\n        </div>\n    </div>)\n}\n\nexport default TextCard;","import React, { useEffect, useState } from \"react\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\n\nimport './card.style.css';\n\n//TODO: multiple images might be slideshow in the future?\nconst QuoteCard = ({position, content, dispatchAddToHistory,sanityClient}) =>{\n\n    const serializers = {\n        marks: {\n            internalLink: ({mark, children}) => {\n            return <span className=\"internalLink\" data-internallink={mark.reference._ref}>{children}</span>\n            },\n            link: ({mark, children}) => {\n            // Read https://css-tricks.com/use-target_blank/\n            const { blank, href } = mark\n            return blank ?\n                <a href={href} target=\"_blank\" rel=\"noopener\">{children}</a>\n                : <a href={href}>{children}</a>\n            }\n        }\n    }\n\n    const builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\n    return(\n    <div className={`cardContent`}>\n        <div className={`title`}>{content.title}</div>\n        {content.images ?\n                <div class=\"cardImageWrapper\">\n                <img src={urlFor(content.images[0].image)} />\n            </div>\n        :''}\n        <div className=\"blockContent\">\n                <BlockContent\n                    blocks={content.text}\n                    projectId={sanityClient.clientConfig.projectId}\n                    dataset={sanityClient.clientConfig.dataset}\n                    serializers={serializers} \n                />\n        </div>\n    </div>)\n}\n\nexport default QuoteCard;","import React, { useEffect, useState } from \"react\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\n\nimport './card.style.css';\n\n//TODO: multiple images might be slideshow in the future?\nconst BookCard = ({position, content, dispatchAddToHistory,sanityClient}) =>{\n\n    const serializers = {\n        marks: {\n            internalLink: ({mark, children}) => {\n            return <span className=\"internalLink\" data-internallink={mark.reference._ref}>{children}</span>\n            },\n            link: ({mark, children}) => {\n            // Read https://css-tricks.com/use-target_blank/\n            const { blank, href } = mark\n            return blank ?\n                <a href={href} target=\"_blank\" rel=\"noopener\">{children}</a>\n                : <a href={href}>{children}</a>\n            }\n        }\n    }\n\n    const builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\n    return(\n    <div className={`cardContent`}>\n        <div className={`title`}>{content.title}</div>\n        {content.images ?\n                <div class=\"cardImageWrapper\">\n                <img src={urlFor(content.images[0].image)} />\n            </div>\n        :''}\n        <div className=\"blockContent\">\n                <BlockContent\n                    blocks={content.text}\n                    projectId={sanityClient.clientConfig.projectId}\n                    dataset={sanityClient.clientConfig.dataset}\n                    serializers={serializers} \n                />\n        </div>\n    </div>)\n}\n\nexport default BookCard;","import React, { useEffect, useState } from \"react\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\n\nimport './card.style.css';\n\n//TODO: multiple images might be slideshow in the future?\nconst ProjectCard = ({position, content, dispatchAddToHistory,sanityClient}) =>{\n\n    const serializers = {\n        marks: {\n            internalLink: ({mark, children}) => {\n            return <span className=\"internalLink\" data-internallink={mark.reference._ref}>{children}</span>\n            },\n            link: ({mark, children}) => {\n            // Read https://css-tricks.com/use-target_blank/\n            const { blank, href } = mark\n            return blank ?\n                <a href={href} target=\"_blank\" rel=\"noopener\">{children}</a>\n                : <a href={href}>{children}</a>\n            }\n        }\n    }\n\n    const builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\n    return(\n    <div className={`cardContent`}>\n        <div className={`title`}>{content.title}</div>\n        {content.images ?\n                <div class=\"cardImageWrapper\">\n                <img src={urlFor(content.images[0].image)} />\n            </div>\n        :''}\n        <div className=\"blockContent\">\n                <BlockContent\n                    blocks={content.text}\n                    projectId={sanityClient.clientConfig.projectId}\n                    dataset={sanityClient.clientConfig.dataset}\n                    serializers={serializers} \n                />\n        </div>\n    </div>)\n}\n\nexport default ProjectCard;","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BlockContent from \"@sanity/block-content-to-react\";\n\nimport ImageCard from \"./imageCard.component\";\nimport VideoCard from \"./videoCard.component\";\nimport TextCard from \"./textCard.component\";\nimport QuoteCard from \"./quoteCard.component\";\nimport BookCard from \"./bookCard.component\";\nimport ProjectCard from \"./projectCard.component\";\n\nimport './card.style.css';\n\n\n//TODO: create random card-button\n//TODO: create templates for each card based on content type\n\nconst Card = ({position, content, dispatchAddToHistory,sanityClient}) =>{\n\n    let cardComponent = null;\n    if(content._type === 'project'){\n        cardComponent = <ProjectCard position={position} content={content} dispatchAddToHistory={dispatchAddToHistory} sanityClient={sanityClient} />;\n    }\n    else{\n        switch(content.referenceType) {\n        case 'referenceTypeImage':\n            cardComponent = <ImageCard position={position} content={content} dispatchAddToHistory={dispatchAddToHistory} sanityClient={sanityClient} />;\n            break;\n        case 'referenceTypeVideo':\n            cardComponent = <VideoCard position={position} content={content} dispatchAddToHistory={dispatchAddToHistory} sanityClient={sanityClient} />;\n            break;\n        case 'referenceTypeText':\n            cardComponent = <TextCard position={position} content={content} dispatchAddToHistory={dispatchAddToHistory} sanityClient={sanityClient} />;\n            break;\n        case 'referenceTypeQuote':\n            cardComponent = <QuoteCard position={position} content={content} dispatchAddToHistory={dispatchAddToHistory} sanityClient={sanityClient} />;\n            break;\n        case 'referenceTypeBook':\n            cardComponent = <BookCard position={position} content={content} dispatchAddToHistory={dispatchAddToHistory} sanityClient={sanityClient} />;\n            break;\n        default:\n            cardComponent = null;\n        }\n    }\n\n    return(\n        <div className={`cardWrapper`}>\n        {cardComponent}\n          {/* <div className=\"cardContent\">\n            <div className={`title`}>{content.title}</div>\n            <div className=\"blockContent\">\n                        <BlockContent\n                            blocks={content.text}\n                            projectId={sanityClient.clientConfig.projectId}\n                            dataset={sanityClient.clientConfig.dataset}\n                        />\n            </div> */}\n            {/* <div className=\"references\">\n                Related:\n                <br/>\n                <br/>\n                {content.references.map(\n                (post, index) =>\n                    (\n                    <div key={index}>\n                        <div onClick={() => dispatchAddToHistory({ type: 'add', payload: {position:position,id:post.matched[0].slug.current} })} linkelementtarget={post.matched[0].slug.current} className={`linkElement ${post.matched[0]._type}`}>{post.matched[0].title}</div>\n                    </div>\n                    )\n                )\n                }\n            </div> */}\n          </div>\n        \n      \n )\n}\n\nexport default Card;","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport './tags.style.css';\n\nconst Tags = ({currentTags, setClickedTag}) =>{\n\n    if (!currentTags || currentTags.length == 0) return <div>Loading...</div>;\n    console.log(currentTags);\n    return(\n        <div className=\"tagsContainer\"> \n            <div className=\"tagsListWrapper\">\n                <div className=\"tagsListTitle\">Draw new card related to...</div>\n                <ul className=\"tagsList\">\n                    {currentTags.map(tag => (\n                        <li \n                            key={tag.id} \n                            onClick={() => { setClickedTag(tag.id)}}    \n                        >\n                            {tag.title}\n                        </li>\n                    ))} \n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default Tags;","import React, { useEffect, useState, useReducer } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport sanityClient from \"../client.js\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport { Link } from \"react-router-dom\";\n\nimport Card from '../components/card/card.component';\nimport Tags from \"../components/tags/tags.component.jsx\";\n\nconst builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nconst browseHistory = ['a1b61c75-ff5f-4230-93d8-6a2fd6936e12', '',''];\n\nconst historyReducer = (browseHistory, action) => {\n    switch (action.type){\n        case 'add':\n            const addToBrowseHistory = [...browseHistory];\n            switch (action.payload.position){\n                case 'left':\n                        addToBrowseHistory[addToBrowseHistory.length-1] = '';\n                        addToBrowseHistory[addToBrowseHistory.length-2] = (action.payload.id);\n                break;\n                case 'middle':\n                    addToBrowseHistory[addToBrowseHistory.length-1] = (action.payload.id);\n                break;\n                case 'right':\n                    addToBrowseHistory.push(action.payload.id);\n                break;\n            }\n            return addToBrowseHistory;\n        break;\n        default:\n            return;\n    }\n}\n\nconst OnePost = () => { \n\nconst [historyState, dispatch] = useReducer(historyReducer, browseHistory);\nconst [postData, setPostData] = useState(null);\n\nconst [currentTags, setCurrentTags] = useState([]);\nconst [clickedTag, setClickedTag] = useState(null);\nconst [historyOffset, setHistoryOffset] = useState(1);\nconst {slug} = useParams();\n\nfunction dispatchAddToHistory(historyItem) {\n    dispatch({ type: historyItem.type, payload: {id:historyItem.payload.id,position:historyItem.payload.position} });\n}\n\nconst returnLatestPosition = () =>{\n    console.log(historyState);\n    if (historyState[1] == \"\"){\n        console.log('left');\n        return 'left'\n    }\n    if (historyState[2] == \"\"){\n        console.log('middle');\n        return 'middle'\n    }\n    else{\n        console.log('right');\n        return 'right'\n    }\n}\n\nfunction returnHistoryState(pos){\n    let returnedPos = '';\n    if((historyState.length-pos) != null){\n        returnedPos = historyState[(historyState.length-pos)*historyOffset]\n    }\n    return returnedPos;\n}\n\nfunction historyStateHasContent(i){\n    let condition;\n    if (!historyState[historyState.length-i]){\n        condition = false\n    } else{\n        condition = true\n    }\n    return condition\n}\n\nconst extractMatchedTags = (tagsArray) =>{ //TODO: remove the tag you just clicked?\n    let returnedTags = tagsArray.map(tag => {\n        if (!tag.id[0]){\n            return \n        }\n        if (tag.count > 2) {\n            if (tag.id[0]._id == clickedTag){\n                console.log(tag.id[0]._id, clickedTag);\n                return \n            }else{\n                return {id: tag.id[0]._id, title: tag.id[0].title} \n            }\n        }\n    })\n    let filteredReturnedTags = returnedTags.filter(tag =>{\n        return tag != undefined;\n    })\n    \n    return filteredReturnedTags;\n}\n\nconst returnTagSelection = () =>{\n    if(!postData) {\n        return\n    }\n    else {\n        console.log(clickedTag);\n        const latestPos = returnLatestPosition();\n  \n        let leftTags = extractMatchedTags(postData.left[0].tags);  \n        let middleTags = [];\n        let rightTags = [];\n\n        if(latestPos == 'middle'){\n            middleTags = extractMatchedTags(postData.middle[0].tags);\n        }\n        if(latestPos == 'right'){\n            middleTags = extractMatchedTags(postData.middle[0].tags);\n            rightTags = extractMatchedTags(postData.right[0].tags);\n        }\n        \n        let uniqueTags = [...leftTags, ...middleTags, ...rightTags].reduce((acc, current) => {\n            const x = acc.find(item => item.id === current.id);\n            if (!x) {\n              return acc.concat([current]);\n            } else {\n              return acc;\n            }\n          }, []);\n\n        function getRandom(arr, n) {\n            console.log('total', arr);\n            var result = new Array(n),\n                len = arr.length,\n                taken = new Array(len);\n            if (n > len)\n                throw new RangeError(\"getRandom: more elements taken than available\");\n            while (n--) {\n                var x = Math.floor(Math.random() * len);\n                result[n] = arr[x in taken ? taken[x] : x];\n                taken[x] = --len in taken ? taken[len] : len;\n            }\n            return result;\n        }\n\n        const returnAllowedTagAmount = () =>{\n            if (uniqueTags.length < 5){return uniqueTags.length}\n            else {return 5}\n        }\n\n        let randomTags = getRandom(uniqueTags, returnAllowedTagAmount());\n        return randomTags;\n    }\n}\n\nuseEffect(() => {\nconsole.log(postData);\n    const latestPos = returnLatestPosition();\n    const filterPosts = (data) =>{\n            if (latestPos == 'left' ){\n                return data._id !== postData.left[0]._id\n            }\n            if (latestPos == 'middle'){\n                return data._id !== postData.left[0]._id && data._id !== postData.middle[0]._id\n            }\n            if (latestPos == 'right'){\n                return data._id !== postData.left[0]._id && data._id !== postData.middle[0]._id && data._id !== postData.right[0]._id\n            }\n    }\n\n    if (clickedTag == null){\n        return\n    } else{\n\n    let fetchRequest = `*[referenceTags[]._ref == \"${clickedTag}\"]{_id}`;\n\n    sanityClient\n    .fetch(fetchRequest)\n    .then((data) => data.filter(filterPosts))\n    .then((data) => data[Math.floor(Math.random()*data.length)])\n    .then((data) => dispatchAddToHistory({ type: 'add', payload: {position:returnLatestPosition(),id:data._id} }))\n    .catch(console.error); \n    }\n}, [clickedTag]);\n\nuseEffect(() => {\n    if (!postData){return}\n    else{setCurrentTags(returnTagSelection);}\n}, [postData]);\n\n// TODO: tidy up youtube/vimeo request better\nuseEffect(() => { //TODO: maybe dont have to call all three each time?\n    let fetchRequest = `*[]{ \n        \"right\":${historyStateHasContent(1) ? ` *[_id == \"${returnHistoryState(1)}\"]{\n            _id,\n            title,\n            _type,\n            text,\n            images,\n            videos[]{\n                'muxAssetDoc': *[_id == ^.video.asset._ref]{...},\n                'youtube': {...},\n                'vimeo': {...}\n            },\n            referenceType,\n            \"tags\": referenceTags[]{\"id\": *[_type == \"tagItem\" && _id == ^._ref]{_id, title}, \"count\": count(*[_type == \"referenceItem\" && references(^._ref) || _type == \"project\" && references(^._ref)])}\n            },\n            `:`{},`}\n            \"middle\":${historyStateHasContent(2) ? ` *[_id == \"${returnHistoryState(2)}\"]{\n                _id,\n                title,\n                _type,\n                text,\n                images,\n                videos[]{\n                    'muxAssetDoc': *[_id == ^.video.asset._ref]{...},\n                    'youtube': {...},\n                    'vimeo': {...}\n                },\n                referenceType,\n                \"tags\": referenceTags[]{\"id\": *[_type == \"tagItem\" && _id == ^._ref]{_id, title}, \"count\": count(*[_type == \"referenceItem\" && references(^._ref) || _type == \"project\" && references(^._ref)])}\n            },\n            `:`{},`}\n            \"left\": ${historyStateHasContent(3) ? ` *[_id == \"${returnHistoryState(3)}\"]{\n                _id,\n                title,\n                _type,\n                text,\n                images,\n                videos[]{\n                    'muxAssetDoc': *[_id == ^.video.asset._ref]{...},\n                    'youtube': {...},\n                    'vimeo': {...}\n                },\n                referenceType,\n                \"tags\": referenceTags[]{\"id\": *[_type == \"tagItem\" && _id == ^._ref]{_id, title}, \"count\": count(*[_type == \"referenceItem\" && references(^._ref) || _type == \"project\" && references(^._ref)])}\n                },\n            `:`{}`}}`;\n            // Sending fetch request\n    sanityClient\n        .fetch(fetchRequest)\n        .then((data) => setPostData(data[0]))\n        .catch(console.error);\n}, [slug, historyState, historyOffset]);\n\nif (!postData) return <div>Loading...</div>;\n  return (\n    <div className=\"home\">\n        <div className=\"content\">\n            {postData.left.length ?\n                <Card position='left' content={postData.left[0]} dispatchAddToHistory={dispatchAddToHistory} sanityClient={sanityClient}/>\n            :''}\n            {postData.middle.length ?\n                <Card position='middle' content={postData.middle[0]} dispatchAddToHistory={dispatchAddToHistory} sanityClient={sanityClient}/>\n            :''}\n            {postData.right.length ?\n                <Card position='right' content={postData.right[0]} dispatchAddToHistory={dispatchAddToHistory} sanityClient={sanityClient}/>\n            :''}\n            <Tags currentTags={currentTags} setClickedTag={setClickedTag}/>\n        </div>\n    </div>\n  );\n}\n\nexport default OnePost;","import './App.css';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport scroller from \"./pages/scroller.page.jsx\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <Route component={scroller} path=\"/NadineBotha/\" />\n      </div>\n    </BrowserRouter>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}